name: Run integration tests
on: 
  pull_request: 
    types: [closed]
    branches: 
      - main

env:
  POSTGRESQL_HOST: ${{ vars.POSTGRESQL_HOST }}
  POSTGRESQL_USER: ${{ secrets.POSTGRESQL_USER }}
  POSTGRESQL_PASSWORD: ${{ secrets.POSTGRESQL_PASSWORD }}
  POSTGRESQL_DB: ${{ vars.POSTGRESQL_DB }}
  PORT: ${{ vars.PORT }}
  GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

jobs:
  # Label of the container job
  packer-job:
    if: github.event.pull_request.merged == true

    runs-on: ubuntu-latest

    steps:

      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Build tar file
        run: |
          cd ..
          tar -czf /tmp/webapp-artifact.tar.gz webapp

      - name: Setup node
        uses: actions/setup-node@v4  

      - name: Install postgres
        run: |
          sudo apt-get update
          sudo apt-get install postgresql postgresql-contrib
          sudo service postgresql start
          sudo -u postgres psql -c "CREATE DATABASE ${{vars.POSTGRESQL_DB}};"
          sudo -u postgres psql -c "CREATE USER ${{secrets.POSTGRESQL_USER}} WITH PASSWORD '${{secrets.POSTGRESQL_PASSWORD}}';"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{vars.POSTGRESQL_DB}} TO ${{secrets.POSTGRESQL_USER}};"
        
      - name: Install dependencies
        run: npm install

      - name: Run server
        run: npm start &
      
      - name: Run tests
        run: npm test
        env:
          ENV: DEV

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Install packer
        uses: hashicorp/setup-packer@main

      - name: Run `packer init`
        id: init
        run: "packer init packer"

      - name: Run `packer validate`
        id: validate
        run: "packer validate packer"

      - name: Create custom image
        run: packer build packer

      - name: Get the latest packer image
        run: |
          gcloud compute images list \
          --project=megamindcorp-dev \
          --filter="name~'webapp-centos-stream-8-.*'" \
          --sort-by="creationTimestamp asc" | awk '{print $1}' | export IMAGE=$(tail -n 1)

      - name: Create a environment file with the database credentials
        run: |
          echo POSTGRESQL_DB=${{vars.POSTGRESQL_DB}} >> .env
          echo POSTGRESQL_USER=${{secrets.POSTGRESQL_USER}} >> .env
          echo POSTGRESQL_PASSWORD=${{secrets.POSTGRESQL_PASSWORD}} >> .env
          echo POSTGRESQL_HOST=${{vars.POSTGRESQL_HOST}} >> .env
          echo PORT=${{vars.PORT}} >> .env


      - name: Create a new instance template
        run: |
          gcloud compute instance-templates create ${{vars.template-name}} \
          --image ${IMAGE} \
          --machine-type=e2-medium \
          --boot-disk-size=100GB \
          --tags "webapp-subnet" \
          --boot-disk-type=pd-ssd \
          --network=megacorp-vpc \
          --subnet=webapp-subnetwork-webapp \
          --region=us-east1\
          --metadata=startup-script="\
                    #! /bin/bash
                    touch .env
                    echo POSTGRESQL_DB=${POSTGRESQL_DB} >> .env
                    echo POSTGRESQL_USER=${DB_USER} >> .env
                    echo POSTGRESQL_PASSWORD=${DB_PASSWORD} >> .env
                    echo POSTGRESQL_HOST=${PRIVATE_IP} >> .env
                    echo PORT=6969 >> .env
                    
                    sudo mv .env /opt/webapp/.env"     
                    
        env:
          DB_USER: ${{secrets.POSTGRESQL_USER}}
          DB_PASSWORD: ${{secrets.POSTGRESQL_PASSWORD}}
          PRIVATE_IP: ${{vars.POSTGRESQL_HOST}}
          POSTGRESQL_DB: ${{vars.POSTGRESQL_DB}}

      - name: Set new instance template to group-manager
        run: |
          gcloud compute instance-groups managed set-instance-template ${{vars.instance-group-name}} \
          --template ${{vars.template-name}} \
          --zone us-east1-b
       
      - name: Start rolling update of the instance group
        run: |
          gcloud compute instance-groups managed rolling-action start-update ${{vars.instance-group-name}} \
          --zone us-east1-b \
          --version template=${{vars.template-name}} \
          --max-surge 1 \
          --max-unavailable 1

      - name: Check the status of the rolling update
        run: |
          gcloud compute instance-groups managed wait-until ${{vars.instance-group-name}} \
          --version-target-reached
